[{"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\index.js":"1","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\serviceWorker.js":"2","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\app\\store.js":"3","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SideBar\\SideBar.js":"4","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SubredditBox\\SubredditBox.js":"5","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\RedditPostList\\RedditPostList.js":"6","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\RightSideBar\\RightSideBar.js":"7","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\app\\reddit.js":"8","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\RedditPost\\RedditPost.js":"9","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\Header\\Header.js":"10","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\App.js":"11","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SubredditBox\\subredditsSlice.js":"12","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\RedditPostList\\redditPostListSlice.js":"13","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SubredditPage\\SubredditPage.js":"14","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SearchResults\\SearchResults.js":"15","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\app\\scrollToTop.js":"16","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\AllSubredditsPage\\AllSubredditsPage.js":"17","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SinglePost\\SinglePost.js":"18"},{"size":644,"mtime":1612857171732,"results":"19","hashOfConfig":"20"},{"size":5141,"mtime":499162500000,"results":"21","hashOfConfig":"20"},{"size":346,"mtime":1613069251325,"results":"22","hashOfConfig":"20"},{"size":1307,"mtime":1613174400028,"results":"23","hashOfConfig":"20"},{"size":2130,"mtime":1613166426732,"results":"24","hashOfConfig":"20"},{"size":440,"mtime":1613035205205,"results":"25","hashOfConfig":"20"},{"size":4666,"mtime":1612985717456,"results":"26","hashOfConfig":"20"},{"size":5623,"mtime":1613220790328,"results":"27","hashOfConfig":"20"},{"size":3906,"mtime":1613215161083,"results":"28","hashOfConfig":"20"},{"size":2605,"mtime":1613223326293,"results":"29","hashOfConfig":"20"},{"size":3011,"mtime":1613214207835,"results":"30","hashOfConfig":"20"},{"size":350,"mtime":1612906200804,"results":"31","hashOfConfig":"20"},{"size":887,"mtime":1612954427309,"results":"32","hashOfConfig":"20"},{"size":4617,"mtime":1613171563662,"results":"33","hashOfConfig":"20"},{"size":685,"mtime":1613164926477,"results":"34","hashOfConfig":"20"},{"size":411,"mtime":1613078587744,"results":"35","hashOfConfig":"20"},{"size":2949,"mtime":1613174272061,"results":"36","hashOfConfig":"20"},{"size":5494,"mtime":1613220899437,"results":"37","hashOfConfig":"20"},{"filePath":"38","messages":"39","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},"1yv4te4",{"filePath":"41","messages":"42","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"43","messages":"44","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"45","messages":"46","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"47","messages":"48","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"49","usedDeprecatedRules":"40"},{"filePath":"50","messages":"51","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"52","messages":"53","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"54","messages":"55","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"56","messages":"57","errorCount":0,"warningCount":3,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"58","messages":"59","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"60","messages":"61","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},{"filePath":"62","messages":"63","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"64","messages":"65","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"66","messages":"67","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"68","usedDeprecatedRules":"40"},{"filePath":"69","messages":"70","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"71","messages":"72","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"40"},{"filePath":"73","messages":"74","errorCount":0,"warningCount":2,"fixableErrorCount":0,"fixableWarningCount":0,"source":"75","usedDeprecatedRules":"40"},{"filePath":"76","messages":"77","errorCount":0,"warningCount":4,"fixableErrorCount":0,"fixableWarningCount":0,"source":null},"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\index.js",[],["78","79"],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\serviceWorker.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\app\\store.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SideBar\\SideBar.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SubredditBox\\SubredditBox.js",["80","81"],"import React from 'react';\r\nimport './SubredditBox.css';\r\n\r\nimport { Link } from 'react-router-dom';\r\n\r\nimport { useDispatch, useSelector } from 'react-redux';\r\nimport { useEffect } from 'react';\r\nimport RedditCall from '../../app/reddit';\r\nimport { getTrendingSubreddits } from './subredditsSlice';\r\n\r\n\r\nexport default function SubredditBox() {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        RedditCall.fetchTrendingSubreddits().then(results => {\r\n            dispatch(getTrendingSubreddits(results));\r\n        })\r\n    }, []);\r\n\r\n    var subredditList = useSelector(state => state.subreddits);\r\n    subredditList = subredditList.slice(0, 10);\r\n\r\n    return (\r\n        <div className=\"subreddit-boxes\">\r\n            {\r\n                subredditList && subredditList.map(sub => (\r\n                    <Link to={`/${sub.data.display_name_prefixed}`} key={sub.data.id} >\r\n                        <div className=\"subreddit-box\" onClick={() => {\r\n                            window.location.href = `/${sub.data.display_name_prefixed}`\r\n                        }}>\r\n                            <div className=\"subreddit__image\">\r\n                                <img src={sub.data.icon_img} />\r\n                            </div>\r\n                            <div className=\"subreddit__details\">\r\n                                <h3 className=\"subreddit\">{sub.data.display_name_prefixed}</h3>\r\n                                <p>{(sub.data.subscribers > 1000 && sub.data.subscribers < 1000000) ? (sub.data.subscribers / 1000).toFixed(1) + 'k' : (sub.data.subscribers / 1000000).toFixed(1) + 'M'} Members</p>\r\n                            </div>\r\n                        </div>\r\n                    </Link>\r\n                ))\r\n            }\r\n            <div className=\"allsubreddit__nav\" onClick={() => window.location.href='/subreddits'}>\r\n                <h3 className=\"all__nav full__icon__all\"> See all Subreddits</h3>\r\n                <h3 className=\"all__nav half__icon__all\"> See all</h3>\r\n                <h3 className=\"all__nav small__icon__all\">&gt;</h3>\r\n            </div>\r\n        </div>\r\n    );\r\n}\r\n","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\RedditPostList\\RedditPostList.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\RightSideBar\\RightSideBar.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\app\\reddit.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\RedditPost\\RedditPost.js",["82","83","84"],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\Header\\Header.js",["85"],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\App.js",["86"],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SubredditBox\\subredditsSlice.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\RedditPostList\\redditPostListSlice.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SubredditPage\\SubredditPage.js",["87","88"],"import React from 'react';\r\nimport './SubredditPage.css';\r\nimport { useEffect, useState } from 'react';\r\n\r\nimport { Route, Switch } from 'react-router-dom';\r\n\r\nimport AbortController from \"abort-controller\"\r\n\r\nimport RedditCall from '../../app/reddit';\r\nimport RedditPostList from '../RedditPostList/RedditPostList';\r\n\r\nimport WhatshotIcon from '@material-ui/icons/Whatshot';\r\nimport FiberNewIcon from '@material-ui/icons/FiberNew';\r\nimport BarChartIcon from '@material-ui/icons/BarChart';\r\n\r\n\r\nexport default function SubredditPage({ match }) {\r\n    const [subredditAbout, setSubredditAbout] = useState({});\r\n    const [subredditPosts, setSubredditPosts] = useState([]);\r\n    const [subredditPostsHot, setSubredditPostsHot] = useState([]);\r\n    const [subredditPostsNew, setSubredditPostsNew] = useState([]);\r\n    const [subredditPostsRising, setSubredditPostsRising] = useState([]);\r\n\r\n    const controller = new AbortController();\r\n\r\n    useEffect(() => {\r\n        RedditCall.fetchSubredditAbout(`r/${match.params.id}`).then(results => {\r\n            setSubredditAbout(results);\r\n        });\r\n        RedditCall.fetchSubredditPosts(`r/${match.params.id}`).then(results => {\r\n            setSubredditPosts(results)\r\n        });\r\n        RedditCall.fetchSubredditPostsHot(`r/${match.params.id}`).then(results => {\r\n            setSubredditPostsHot(results)\r\n        });\r\n        RedditCall.fetchSubredditPostsRising(`r/${match.params.id}`).then(results => {\r\n            setSubredditPostsRising(results)\r\n        });\r\n        RedditCall.fetchSubredditPostsNew(`r/${match.params.id}`).then(results => {\r\n            setSubredditPostsNew(results)\r\n        });\r\n        return controller.abort();\r\n    }, []);\r\n\r\n    return (\r\n        <div className=\"subreddit__main\">\r\n            <div className=\"subredditHead\">\r\n                <div className=\"subredditHead__top\" style={{\r\n                    backgroundImage: `url(${subredditAbout.banner_img})`,\r\n                    backgroundPosition: `center`,\r\n                    backgroundRepeat: `no-repeat`,\r\n                    backgroundSize: `cover`\r\n                }}>\r\n                    <div className=\"subredditHeadImage\">\r\n                        {\r\n                            subredditAbout.icon_img ? (<img src={subredditAbout.icon_img} />) : (<div className=\"subredditHeadImage___substitute\"></div>)\r\n                        }\r\n                    </div>\r\n                </div>\r\n                <div className=\"subredditHead__middle\">\r\n                    <h1>{subredditAbout.display_name_prefixed}</h1>\r\n                    <h3>{subredditAbout.public_description}</h3>\r\n                    <p>{subredditAbout.subscribers} Members</p>\r\n                    <p>{subredditAbout.accounts_active} Active Members</p>\r\n                </div>\r\n                <div className=\"subredditHead__bottom\">\r\n                    <div className=\"subredditNav active\" onClick={() => {\r\n                        window.location.href = `/${subredditAbout.display_name_prefixed}/hot`\r\n                    }}>\r\n                        <WhatshotIcon />\r\n                        <p className=\"\">Hot</p>\r\n                    </div>\r\n                    <div className=\"subredditNav\" onClick={() => {\r\n                        window.location.href = `/${subredditAbout.display_name_prefixed}/latest`\r\n                    }}>\r\n                        <FiberNewIcon />\r\n                        <p className=\"\">Latest</p>\r\n                    </div>\r\n                    <div className=\"subredditNav\" onClick={() => {\r\n                        window.location.href = `/${subredditAbout.display_name_prefixed}/rising`\r\n                    }}>\r\n                        <BarChartIcon />\r\n                        <p className=\"\">Rising</p>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <Switch>\r\n                <Route exact path={`/${subredditAbout.display_name_prefixed}`}>\r\n                    <RedditPostList posts={subredditPosts} />\r\n                </Route>\r\n                <Route exact path={`/${subredditAbout.display_name_prefixed}/hot`}>\r\n                    <RedditPostList posts={subredditPostsHot} />\r\n                </Route>\r\n                <Route exact path={`/${subredditAbout.display_name_prefixed}/latest`}>\r\n                    <RedditPostList posts={subredditPostsNew} />\r\n                </Route>\r\n                <Route exact path={`/${subredditAbout.display_name_prefixed}/rising`}>\r\n                    <RedditPostList posts={subredditPostsRising} />\r\n                </Route>\r\n            </Switch>\r\n        </div>\r\n    )\r\n}\r\n","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SearchResults\\SearchResults.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\app\\scrollToTop.js",[],"C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\AllSubredditsPage\\AllSubredditsPage.js",["89","90"],"import React from 'react';\r\nimport './AllSubredditsPage.css';\r\n\r\nimport { useDispatch } from 'react-redux';\r\nimport { useEffect } from 'react';\r\n\r\nimport RedditCall from '../../app/reddit';\r\nimport { getTrendingSubreddits } from '../SubredditBox/subredditsSlice';\r\n\r\nimport { connect } from 'react-redux';\r\n\r\nfunction AllSubredditsPage(props) {\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        if (props.allSubreddits === []) {\r\n            RedditCall.fetchTrendingSubreddits().then(results => {\r\n                dispatch(getTrendingSubreddits(results));\r\n            })\r\n        }\r\n    }, []);\r\n\r\n    const roundOffNum = (num) => {\r\n        if (num >= 1000000) {\r\n            return (num / 1000000).toFixed(2) + 'M';\r\n        } else if (num >= 1000) {\r\n            return (num / 1000).toFixed(2) + 'k';\r\n        } else {\r\n            return num;\r\n        }\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"all__subreddits__whole\">\r\n            <h1>All Subreddits:</h1>\r\n            <div className=\"all__subreddits__page__main\">\r\n                <div className=\"subreddits__container\">\r\n                    {\r\n                        props.allSubreddits && props.allSubreddits.map(group => (\r\n                            <div className=\"subreddit__box\" onClick={() => window.location.href=`/${group.data.display_name_prefixed}`}>\r\n                                <div className=\"subreddit__box__top\" style={{\r\n                                    backgroundImage: `url(${group.data.banner_img})`,\r\n                                    backgroundPosition: `center`,\r\n                                    backgroundRepeat: `no-repeat`,\r\n                                    backgroundSize: `cover`\r\n                                }}>\r\n                                    <div className=\"subreddit__box__image\">\r\n                                        {\r\n                                            group.data.icon_img ? (<img src={group.data.icon_img} />) : (<div className=\"subreddit__box__image__substitute\"></div>)\r\n                                        }\r\n                                    </div>\r\n                                </div>\r\n                                <div className=\"subreddit__box__middle\">\r\n                                    <h3>{group.data.display_name}</h3>\r\n                                    <span>{group.data.display_name_prefixed}</span>\r\n                                </div>\r\n                                <div className=\"subreddit__box__bottom\">\r\n                                    <p>{roundOffNum(group.data.subscribers)} Members</p>\r\n                                </div>\r\n                            </div>\r\n                        ))\r\n                    }\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default connect((state => {\r\n    const { subreddits } = state\r\n    return {\r\n        allSubreddits: subreddits\r\n    }\r\n}))(AllSubredditsPage);","C:\\Users\\ROG\\Projects\\Codecademy\\reddit\\src\\features\\SinglePost\\SinglePost.js",["91","92","93","94"],{"ruleId":"95","replacedBy":"96"},{"ruleId":"97","replacedBy":"98"},{"ruleId":"99","severity":1,"message":"100","line":19,"column":8,"nodeType":"101","endLine":19,"endColumn":10,"suggestions":"102"},{"ruleId":"103","severity":1,"message":"104","line":33,"column":33,"nodeType":"105","endLine":33,"endColumn":64},{"ruleId":"99","severity":1,"message":"106","line":25,"column":8,"nodeType":"101","endLine":25,"endColumn":10,"suggestions":"107"},{"ruleId":"103","severity":1,"message":"104","line":47,"column":46,"nodeType":"105","endLine":47,"endColumn":73},{"ruleId":"103","severity":1,"message":"104","line":61,"column":25,"nodeType":"105","endLine":61,"endColumn":77},{"ruleId":"103","severity":1,"message":"104","line":33,"column":21,"nodeType":"105","endLine":33,"endColumn":47},{"ruleId":"99","severity":1,"message":"108","line":40,"column":6,"nodeType":"101","endLine":40,"endColumn":16,"suggestions":"109"},{"ruleId":"99","severity":1,"message":"110","line":43,"column":8,"nodeType":"101","endLine":43,"endColumn":10,"suggestions":"111"},{"ruleId":"103","severity":1,"message":"104","line":56,"column":56,"nodeType":"105","endLine":56,"endColumn":93},{"ruleId":"99","severity":1,"message":"112","line":21,"column":8,"nodeType":"101","endLine":21,"endColumn":10,"suggestions":"113"},{"ruleId":"103","severity":1,"message":"104","line":50,"column":68,"nodeType":"105","endLine":50,"endColumn":101},{"ruleId":"99","severity":1,"message":"114","line":31,"column":8,"nodeType":"101","endLine":31,"endColumn":10,"suggestions":"115"},{"ruleId":"103","severity":1,"message":"104","line":63,"column":50,"nodeType":"105","endLine":63,"endColumn":77},{"ruleId":"116","severity":1,"message":"117","line":76,"column":33,"nodeType":"105","endLine":76,"endColumn":95},{"ruleId":"103","severity":1,"message":"104","line":77,"column":37,"nodeType":"105","endLine":77,"endColumn":85},"no-native-reassign",["118"],"no-negated-in-lhs",["119"],"react-hooks/exhaustive-deps","React Hook useEffect has a missing dependency: 'dispatch'. Either include it or remove the dependency array.","ArrayExpression",["120"],"jsx-a11y/alt-text","img elements must have an alt prop, either with meaningful text, or an empty string for decorative images.","JSXOpeningElement","React Hook useEffect has missing dependencies: 'controller' and 'subredditName'. Either include them or remove the dependency array.",["121"],"React Hook useEffect has a missing dependency: 'controller'. Either include it or remove the dependency array.",["122"],"React Hook useEffect has missing dependencies: 'controller' and 'match.params.id'. Either include them or remove the dependency array.",["123"],"React Hook useEffect has missing dependencies: 'dispatch' and 'props.allSubreddits'. Either include them or remove the dependency array.",["124"],"React Hook useEffect has missing dependencies: 'controller', 'match.params.commentId', and 'match.params.subredditId'. Either include them or remove the dependency array.",["125"],"react/jsx-no-target-blank","Using target=\"_blank\" without rel=\"noreferrer\" is a security risk: see https://html.spec.whatwg.org/multipage/links.html#link-type-noopener","no-global-assign","no-unsafe-negation",{"desc":"126","fix":"127"},{"desc":"128","fix":"129"},{"desc":"130","fix":"131"},{"desc":"132","fix":"133"},{"desc":"134","fix":"135"},{"desc":"136","fix":"137"},"Update the dependencies array to be: [dispatch]",{"range":"138","text":"139"},"Update the dependencies array to be: [controller, subredditName]",{"range":"140","text":"141"},"Update the dependencies array to be: [controller, dispatch]",{"range":"142","text":"143"},"Update the dependencies array to be: [controller, match.params.id]",{"range":"144","text":"145"},"Update the dependencies array to be: [dispatch, props.allSubreddits]",{"range":"146","text":"147"},"Update the dependencies array to be: [controller, match.params.commentId, match.params.subredditId]",{"range":"148","text":"149"},[547,549],"[dispatch]",[914,916],"[controller, subredditName]",[1520,1530],"[controller, dispatch]",[1703,1705],"[controller, match.params.id]",[612,614],"[dispatch, props.allSubreddits]",[1228,1230],"[controller, match.params.commentId, match.params.subredditId]"]